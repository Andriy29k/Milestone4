- name: Setup K3s Control Plane
  hosts: control-plane_group
  become: true
  tags: ['k3s', 'control-plane']
  tasks:
    - name: Install K3s server on control-plane
      shell: |
        curl -sfL https://get.k3s.io | sh -s - server --write-kubeconfig-mode 644
      args:
        creates: /usr/local/bin/k3s

    - name: Wait for K3s server to be ready
      shell: /usr/local/bin/k3s kubectl get nodes
      retries: 10
      delay: 10
      register: k3s_ready
      until: k3s_ready.rc == 0
      become: true

    - name: Read K3s join token
      shell: cat /var/lib/rancher/k3s/server/node-token
      register: k3s_token
      changed_when: false
      become: true

    - name: Set k3s_token fact for all hosts
      set_fact:
        k3s_token: "{{ hostvars[groups['control-plane_group'][0]].k3s_token.stdout }}"

- name: Join worker nodes to K3s cluster
  hosts: workers_group
  become: true
  tags: ['workers']
  tasks:
    - name: Install K3s agent on worker nodes
      shell: |
        curl -sfL https://get.k3s.io | K3S_URL=https://{{ hostvars[groups['control-plane_group'][0]].ansible_host }}:6443 K3S_TOKEN={{ hostvars[groups['control-plane_group'][0]].k3s_token.stdout }} sh -s - agent
      args:
        creates: /usr/local/bin/k3s

- name: Label nodes by role
  hosts: control-plane_group
  become: true
  gather_facts: false
  tags: ['k3s', 'control-plane']
  tasks:
    - name: Label nodes by groups
      shell: |
        /usr/local/bin/k3s kubectl label node {{ item }} node-role={{ node_roles[group] }} --overwrite
      loop: "{{ groups['backend_group'] + groups['frontend_group'] + groups['database_group'] + groups['reverse_proxy_group'] + groups['monitoring_group'] }}"
      loop_control:
        loop_var: item
      vars:
        node_roles:
          backend_group: backend
          frontend_group: frontend
          database_group: database
          reverse_proxy_group: reverse-proxy
          monitoring_group: monitoring
      vars_prompt: []
      when: >
        "{{ item }}" in groups['backend_group'] or
        "{{ item }}" in groups['frontend_group'] or
        "{{ item }}" in groups['database_group'] or
        "{{ item }}" in groups['reverse_proxy_group'] or
        "{{ item }}" in groups['monitoring_group']

- name: Create Docker Registry Secret regcred
  hosts: control-plane_group
  become: true
  gather_facts: false
  tags: ['k3s', 'control-plane']
  tasks:
    - name: Create regcred secret in default namespace
      kubernetes.core.k8s:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: regcred
            namespace: default
          type: kubernetes.io/dockerconfigjson
          data:
            .dockerconfigjson: "{{ lookup('file', 'files/.dockerconfigjson') | b64encode }}"

- name: Deploy Postgres DB
  hosts: control-plane_group
  gather_facts: false
  tags: ['postgres-k3s']
  tasks:
    - name: Apply Postgres PVC
      kubernetes.core.k8s:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        state: present
        src: files/postgres-pvc.yaml

    - name: Apply Postgres ConfigMap (init sql)
      kubernetes.core.k8s:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        state: present
        src: files/postgres-configmap.yaml

    - name: Apply Postgres Deployment
      kubernetes.core.k8s:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        state: present
        src: files/postgres-deployment.yaml

    - name: Apply Postgres Service
      kubernetes.core.k8s:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        state: present
        src: files/postgres-service.yaml

- name: Deploy Redis
  hosts: control-plane_group
  gather_facts: false
  tags: ['redis-k3s']
  tasks:
    - name: Apply Redis Deployment
      kubernetes.core.k8s:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        state: present
        src: files/redis-deployment.yaml

    - name: Apply Redis Service
      kubernetes.core.k8s:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        state: present
        src: files/redis-service.yaml

- name: Deploy Backend
  hosts: control-plane_group
  gather_facts: false
  tags: ['backend-k3s']
  tasks:
    - name: Apply Backend Deployment
      kubernetes.core.k8s:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        state: present
        src: files/backend-deployment.yaml

    - name: Apply Backend Service
      kubernetes.core.k8s:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        state: present
        src: files/backend-service.yaml

- name: Deploy Frontend
  hosts: control-plane_group
  gather_facts: false
  tags: ['frontend-k3s']
  tasks:
    - name: Apply Frontend Deployment
      kubernetes.core.k8s:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        state: present
        src: files/frontend-deployment.yaml

    - name: Apply Frontend Service
      kubernetes.core.k8s:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        state: present
        src: files/frontend-service.yaml

- name: Deploy Reverse Proxy Ingress
  hosts: control-plane_group
  gather_facts: false
  tags: ['reverse-proxy-k3s']
  tasks:
    - name: Apply Ingress manifest
      kubernetes.core.k8s:
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        state: present
        src: files/reverse-proxy-ingress.yaml
