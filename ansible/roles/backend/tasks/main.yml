- name: Ensure Docker is installed
  apt:
    name: docker.io
    state: present
    update_cache: true
  become: true

- name: Ensure Docker service is running and enabled
  systemd:
    name: docker
    state: started
    enabled: true
  become: true

- name: Create backend Docker network if not exists
  community.docker.docker_network:
    name: backend
    state: present

- name: Stop redis container if running
  community.docker.docker_container:
    name: redis
    state: stopped
  ignore_errors: true

- name: Remove redis container if exists
  community.docker.docker_container:
    name: redis
    state: absent
  ignore_errors: true

- name: Run Redis container
  community.docker.docker_container:
    name: redis
    image: redis:7-alpine
    state: started
    restart_policy: always
    networks:
      - name: backend

- name: Stop backend container if running
  community.docker.docker_container:
    name: backend
    state: stopped
  ignore_errors: true

- name: Remove backend container if exists
  community.docker.docker_container:
    name: backend
    state: absent
  ignore_errors: true

- name: Remove old backend image if exists
  community.docker.docker_image:
    name: "{{ backend_image }}"
    state: absent
  ignore_errors: true

- name: Log in to Docker Hub
  community.docker.docker_login:
    username: "{{ docker_username }}"
    password: "{{ docker_password }}"

- name: Pull backend Docker image
  community.docker.docker_image:
    name: "{{ backend_image }}"
    source: pull

- name: Run backend container
  community.docker.docker_container:
    name: backend
    image: "{{ backend_image }}"
    state: started
    restart_policy: always
    networks:
      - name: backend
    env:
      DB_ENDPOINT_TOKEN: "{{ database_url }}"
      DB_NAME_TOKEN: "{{ database_name }}"
      DB_USERNAME_TOKEN: "{{ db_username_token }}"
      DB_USERPASSWORD_TOKEN: "{{ db_userpassword_token }}"
      REDIS_URL: "redis://redis:6379"
    ports:
      - "8080:8080"
