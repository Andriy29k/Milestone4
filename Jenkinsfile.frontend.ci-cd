pipeline {
    agent {label 'Linux'}

    environment {
        GITHUB_URL="https://github.com/Andriy29k/intern_project01.git"
        FRONTEND_IMAGE_NAME = 'class_schedule_frontend'
        IMAGE_TAG = 'latest'
    }

    tools {
        nodejs 'nodejs-18'
    }

    stages {
        stage('Checkout branch') {
            steps {
                git branch: 'dev',
                    url: "${env.GITHUB_URL}",
                    credentialsId: 'github-credentials'
            }
        }
        
        // stage('Sonar Scanning') {
        //     steps {
        //         withSonarQubeEnv('SonarQube') {
        //             sh 'sonar-scanner -Dproject.settings=./sonar/frontend-sonar.properties'
        //         }
        //     }
        // }

        // stage('Build Frontend') {
        //     steps {
        //         dir('frontend') {
        //             dir('frontend') {
        //                 sh 'npm install'
        //                 sh 'npm run build'
        //                 sh 'tar -czf frontend-artifact.tar.gz build/' 
        //                 archiveArtifacts artifacts: 'frontend-artifact.tar.gz', fingerprint: true
        //             }
        //         }
        //     }
        // }

        // stage('Docker images build') {
        //     steps {
        //         dir('frontend/frontend') {
        //            sh '''
        //                 mkdir -p ../build
        //                 tar -xzf frontend-artifact.tar.gz -C ../build/
        //                 rm -rf build
        //             '''
        //         }
        //         withCredentials([usernamePassword(
        //                 credentialsId: 'DOCKERHUB_CREDENTIALS', 
        //                 usernameVariable: 'DOCKERHUB_USERNAME', 
        //                 passwordVariable: 'DOCKERHUB_PASSWORD'
        //         )]) {
        //             dir('frontend') {
        //                 sh 'echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin'
        //                 sh "docker build --no-cache -t $DOCKERHUB_USERNAME/$FRONTEND_IMAGE_NAME:$IMAGE_TAG ."
        //                 sh "docker push $DOCKERHUB_USERNAME/$FRONTEND_IMAGE_NAME:$IMAGE_TAG"
        //             }
        //         }
        //     }
        // }

        // stage('Upload Artifacts to GCS') {
        //     steps {
        //         script {
        //             def gcloud = tool 'google-cloud-sdk'
        //             withEnv(["PATH=${gcloud}/bin:${env.PATH}"]) {
        //                 withCredentials([file(credentialsId: 'GCP_CREDS_JSON', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
        //                     dir('frontend/frontend') {
        //                         sh '''
        //                             gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"
        //                             gsutil cp frontend-artifact.tar.gz gs://class-schedule-artifacts/frontend-artifacts/
        //                         '''
        //                     }
        //                 }
        //             }
        //         }
        //     }
        // }
        
        stage('Ansible configuration [frontend, reverse_proxy]') {
            steps {
                dir('ansible/files') {
                    sh '''
                        chmod +x generate_inventory_from_config.sh
                        ./generate_inventory_from_config.sh
                    '''
                }
                dir('ansible') {
                    sh '''
                        ansible all -i inventory.ini -m ping
                        ansible-galaxy collection install community.docker
                        ansible-playbook -i inventory.ini site.yml -l frontend,reverse_proxy
                    '''
                }
            }
        }
    }
}
